
package com.mf.dp.decrypt;

import com.mf.dp.decrypt.exception.DecryptSslKeyException;
import com.mf.dp.decrypt.osvalidator.DPDataDirectory;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class DecryptSslKeyTest {

    @Test
    @DisplayName("Test to validate getKeyInfo")
    public void test_getKeyInfo(){
        try (MockedStatic<DPDataDirectory> mock_dir = Mockito.mockStatic(DPDataDirectory.class)) {
            String invalid_path = "invalid_path";
            String invalid_pvt_key = "invalid_key";
            mock_dir.when(DPDataDirectory::getKeyFilePath).thenReturn(invalid_path);
            try (MockedStatic<DecryptSslKey> mock_key = Mockito.mockStatic(DecryptSslKey.class)){
                mock_key.when(() -> DecryptSslKey.readPrivateKeyFromPEM(invalid_path)).thenReturn(invalid_pvt_key);
                mock_key.when(DecryptSslKey::getKeyInfo).thenCallRealMethod();
                assertDoesNotThrow(DecryptSslKey::getKeyInfo);
            }
        } catch (Exception e) {
            e.printStackTrace();
            fail("Should not have thrown any exception");
        }
    }

    @Test
    @DisplayName("Test to validate method getDPCertPath")
    public void test_getDPCertPath(){
        try(MockedStatic<DPDataDirectory> mock_dir = Mockito.mockStatic(DPDataDirectory.class)){
            DecryptSslKey obj = new DecryptSslKey();
            String invalid_path = "C:\\ProgramData\\MyCompanyTmp";
            mock_dir.when(DPDataDirectory::getCertFilePaths).thenReturn(invalid_path);
            assertEquals(invalid_path,obj.getDPCertPath());
        } catch (DecryptSslKeyException e) {
            fail("Should not have thrown any exception");
        }
    }

    @Test
    @DisplayName("Test to validate Exception and output in convertToPrivateKeyFromDER")
    public void testExceptionAndOutputIn_convertToPrivateKeyFromDER() {
        byte[] encrypted = { -102, -22, 73, -117, 96, -2};
        Throwable exception = Assertions.assertThrows(
                DecryptSslKeyException.class, () -> DecryptSslKey.convertToPrivateKeyFromDER(encrypted)
        );
        assertTrue(exception.getMessage().contains("Failed to convert to PrivateKey"));
    }

    @Test
    @DisplayName("Test to validate Exception and output in readPrivateKeyFromPEM")
    public void testExceptionAndOutputIn_readPrivateKeyFromPEM() {
        Throwable exception = Assertions.assertThrows(
                DecryptSslKeyException.class, () -> DecryptSslKey.readPrivateKeyFromPEM("abcdefg")
        );
        assertEquals("Private Key .enc file not found", exception.getMessage());
    }

    @Test
    @DisplayName("Test to validate Exception in getPrivateKeyString")
    public void testExceptionIn_getPrivateKeyString(){
        BufferedReader br_1 = new BufferedReader(new StringReader("-----BEGIN PRIVATE KEY-----\n" +
                "MIGEAgEAMBAGByqGSM49AgEGBSuBBAAKBG0wawIBAQQgVcB/UNPxalR9zDYAjQIf\n" +
                "jojUDiQuGnSJrFEEzZPT/92hRANCAASc7UJtgnF/abqWM60T3XNJEzBv5ez9TdwK\n" +
                "H0M6xpM2q+53wmsN/eYLdgtjgBd3DBmHtPilCkiFICXyaA8z9LkJ\n" +
                "-----END PRIVATE KEY-----"));
        BufferedReader br_2 = new BufferedReader(new StringReader(""));
        Assertions.assertDoesNotThrow(
                () -> DecryptSslKey.getPrivateKeyString(br_1)
        );
        Throwable exception = Assertions.assertThrows(
                DecryptSslKeyException.class, () -> DecryptSslKey.getPrivateKeyString(br_2)
        );
        assertEquals("Private Key not found", exception.getMessage());
        try {
            BufferedReader mocked_br = mock(BufferedReader.class);
            when(mocked_br.readLine()).thenThrow(IOException.class);
            DecryptSslKey.getPrivateKeyString(mocked_br);
        } catch (Throwable e) {
            assertTrue(e.getMessage().contains("Failed to read Private Key file"));
        }
    }

    @Test
    @DisplayName("Test to validate Exception and output in decryptPrivateKey")
    public void testExceptionAndOutputIn_decryptPrivateKey(){
        Throwable exception_1 = Assertions.assertThrows(
                DecryptSslKeyException.class, () -> DecryptSslKey.decryptPrivateKey("")
        );
        assertTrue(exception_1.getMessage().contains("Failed to read INET Private Key file"));
        Throwable exception_2 = Assertions.assertThrows(
                DecryptSslKeyException.class, () -> DecryptSslKey.decryptPrivateKey("\0")
        );
        assertEquals("Unknown Exception occurred,failed to read INET Private Key file", exception_2.getMessage());
        try(MockedStatic<Files> mock_f = Mockito.mockStatic(Files.class)) {
            byte[] key = { -102, -22, 73,-102, -22, 73,-102, -22, 73,-102, -22, 73,-102, -22, 73,-102, -22, 73,-102, -22, 73,-102, -22, 73,-102, -22, 73,-102, -22, 73,-102, -22, 73,-102, -22, 73,-102, -22, 73,-102, -22, 73,-102, -22, 73,-102, -22, 73,-102, -22, 73};
            mock_f.when(()->Files.readAllBytes(any(Path.class))).thenReturn(key);
            try(MockedStatic<DecryptSslKey> mock_key = Mockito.mockStatic(DecryptSslKey.class)){
                mock_key.when(()->DecryptSslKey.getDecryptedPrivateKeyString(any(byte[].class),anyInt())).thenReturn("invalid_output");
                mock_key.when(()->DecryptSslKey.decryptPrivateKey(anyString())).thenCallRealMethod();
                assertEquals("invalid_output",DecryptSslKey.decryptPrivateKey("c:"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    @DisplayName("Test to validate Exception in getDecryptedPrivateKeyString")
    public void testExceptionIn_getDecryptedPrivateKeyString(){
        byte[] encrypted = {};
        Assertions.assertDoesNotThrow(() -> DecryptSslKey.getDecryptedPrivateKeyString(encrypted,48));
        Throwable e = Assertions.assertThrows(
                DecryptSslKeyException.class, () -> DecryptSslKey.getDecryptedPrivateKeyString(encrypted,2)
        );
        assertTrue(e.getMessage().contains("Failed to decrypt Private Key file"));
    }
}